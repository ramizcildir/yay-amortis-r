import pygame
import sys
import math

# Pygame başlat
pygame.init()
WIDTH, HEIGHT = 1000, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Gerçekçi Araba Süspansiyonu")

# Renkler
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
DARK_GRAY = (80, 80, 80)
BLACK = (0, 0, 0)
RED = (180, 50, 50)
BLUE = (70, 130, 255)
GREEN = (50, 200, 100)

clock = pygame.time.Clock()
dt = 0.016

# Fiziksel Sabitler
mass = 3.0          # kg
k = 60.0            # Yay sabiti
c = 6.0             # Sönüm katsayısı
gravity = 9.81      # m/s^2

# Başlangıç
anchor_y = 200
car_y = 300.0
v = 0.0
a = 0.0

# Boyutlar
car_width = 280
car_height = 60
wheel_radius = 32
wheel_offset = 80

font = pygame.font.SysFont("Arial", 20)

def draw_spring(start_y, end_y, x):
    segments = 12
    seg_len = (end_y - start_y) / segments
    width = 15
    pts = []
    dir = 1
    for i in range(segments + 1):
        y = start_y + i * seg_len
        dx = width * dir if i not in [0, segments] else 0
        pts.append((x + dx, y))
        dir *= -1
    pygame.draw.lines(screen, BLUE, False, pts, 3)

def draw_car_body(y_pos):
    body_rect = pygame.Rect(WIDTH//2 - car_width//2, int(y_pos), car_width, car_height)
    pygame.draw.rect(screen, RED, body_rect, border_radius=20)
    pygame.draw.rect(screen, BLACK, body_rect, 2, border_radius=20)

    # Ön cam
    front_glass = pygame.Rect(WIDTH//2 - 50, y_pos + 10, 100, 30)
    pygame.draw.ellipse(screen, GRAY, front_glass)

def draw_wheel(x, y):
    pygame.draw.circle(screen, BLACK, (x, int(y)), wheel_radius)
    pygame.draw.circle(screen, GRAY, (x, int(y)), wheel_radius - 6)

def draw_ground():
    pygame.draw.rect(screen, GREEN, (0, HEIGHT - 40, WIDTH, 40))

def draw_info():
    texts = [
        f"Kütle: {mass:.2f} kg",
        f"Yay Sabiti: {k:.1f} N/m",
        f"Amortisör: {c:.1f} Ns/m",
        f"Hız: {v:.2f} m/s",
        f"İvme: {a:.2f} m/s²"
    ]
    for i, txt in enumerate(texts):
        label = font.render(txt, True, BLACK)
        screen.blit(label, (10, 10 + i * 25))

def update_physics():
    global car_y, v, a
    displacement = car_y - anchor_y
    spring_force = -k * displacement
    damping_force = -c * v
    net_force = spring_force + damping_force + mass * gravity
    a = net_force / mass
    v += a * dt
    car_y += v * dt

def handle_input():
    global k, c, mass, v
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP]:
        k += 20 * dt
    if keys[pygame.K_DOWN]:
        k = max(0, k - 20 * dt)
    if keys[pygame.K_LEFT]:
        c = max(0, c - 10 * dt)
    if keys[pygame.K_RIGHT]:
        c += 10 * dt
    if keys[pygame.K_w]:
        mass += 1 * dt
    if keys[pygame.K_s]:
        mass = max(0.5, mass - 1 * dt)
    if keys[pygame.K_SPACE]:
        v = -7  # zıplat

def main():
    global dt
    running = True
    while running:
        screen.fill(WHITE)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        handle_input()
        update_physics()

        # Çizimler
        draw_ground()

        # Yaylar: tekerlekten gövdeye
        x1 = WIDTH//2 - wheel_offset
        x2 = WIDTH//2 + wheel_offset
        wheel_y = car_y + car_height + wheel_radius - 10
        draw_spring(wheel_y - 80, car_y + car_height, x1)
        draw_spring(wheel_y - 80, car_y + car_height, x2)

        draw_car_body(car_y)
        draw_wheel(x1, wheel_y)
        draw_wheel(x2, wheel_y)
        draw_info()

        pygame.display.flip()
        dt = clock.tick(60) / 1000.0

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
